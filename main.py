import asyncio
import logging
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.types.message import ContentType
from aiogram.types import PreCheckoutQuery
import markups as nav
from db import DataBase
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
import datetime
import time
import os
from dotenv import load_dotenv


load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
YOOTOKEN = os.getenv('YOOTOKEN')

logging.basicConfig(level=logging.INFO)

#Initialize bot
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
invite_links = {}

db = DataBase('/data/database.db')

class Form(StatesGroup):
    name = State() 
    age = State() 
    gender = State()
    why = State()

#–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
     user_id = message.from_user.id
     if not db.user_exists(user_id):
        username = message.from_user.username
        db.add_user(user_id, username)
        user = message.from_user
        name = user.first_name
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name} üå∏\n\n–≠—Ç–æ —á–∞—Ç-–±–æ—Ç –ê–Ω–Ω—ã –ú–∞—Ä—á–µ–Ω–∫–æ \n–ò–Ω—Å—Ç–∞–≥—Ä–∞–º: (instagram.com/annamarchenko_psy)\n–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: (t.me/annamarchenko_psy)"
                             f"\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª —Å –∑–∞–¥–∞–Ω–∏—è–º–∏, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É¬ª, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º", reply_markup = nav.mainMenu, parse_mode=ParseMode.MARKDOWN)
        await message.answer(f'–ü–æ—á–µ–º—É –∫–∞–Ω–∞–ª ¬´–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ –¥–ª—è –≤–∞—Å?:'
                             f'\n\n1. –ö–∞–∂–¥–æ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—â–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è'
                             f'\n2. –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º–∏ –æ—Ç –ª—é–±—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π'
                             f'\n3. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–µ–±—è –∏ –¥—Ä—É–≥–∏—Ö'
                             f'\n4. –¢–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –æ—â—É—â–µ–Ω–∏—è –æ–ø–æ—Ä—ã –ø–æ–¥ —Å–æ–±–æ–π, –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö'
                             f'\n5. –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π'
                             f'\n\n–í —á–µ–º —Å–µ–∫—Ä–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚ùì'
                             f'\n–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏ —Ä–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–æ–¥—Ö–æ–¥, –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç!'
                             f'\n\n–ü–æ—á–µ–º—É –ª—É—á—à–µ –∑–∞–π—Ç–∏ –≤ —á–∞—Ç –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤‚ùì‚ùóÔ∏è'
                             f'\n–í –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–¥–µ—Ç —Ä–∞—Å–∫–∞—á–∫–∞, –±–ª–∏–∂–µ –∫ 3-–º—É –º–µ—Å—è—Ü—É –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è'
                             f'\n–∑–∞ —Å—á–µ—Ç —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ –ª–∏—á–Ω–æ–π —Ç–µ—Ä–∞–ø–∏–∏ (–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ),'
                             f'\n–ø—Ä–∏–¥–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–±–æ–¥–∞, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —Å—Ç–∞–Ω–µ—Ç–µ —Å–º–µ–ª–µ–µ, –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø—Ä–æ—à–ª—ã–π –æ–ø—ã—Ç, –Ω–µ –∑–∞—Ö–æ–¥—è –≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.'
                             f'\n\nüìå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ 31.10 ‚Äî 2990 —Ä—É–±. –≤ –º–µ—Å—è—Ü.'
                             f'\n–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ - —Å–∫–∏–¥–∫–∞')

#[–ú–ü]–û–± –ê–Ω–Ω–µ
@dp.message_handler(filters.Text(equals="‚ú® –û–±–æ –º–Ω–µ ‚ú®"))
async def cmd_handler(message: types.Message):
    await message.answer(f"‚ú® –î–∏–ø–ª–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å–æ —Å—Ç–∞–∂–µ–º –±–æ–ª–µ–µ 17 –ª–µ—Ç.\n\n"
                         f"‚ú® –ó–∞–∫–æ–Ω—á–∏–ª–∞ –°–ü–±–ì–£ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏: —Ä–∞–±–æ—Ç–∞—é —Å–æ —Å—Ç—Ä–∞—Ö–∞–º–∏, —Ç—Ä–µ–≤–æ–≥–∞–º–∏, –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å—é –≤ –∂–∏–∑–Ω–∏.\n\n"
                         f"‚ú® –ò—Å–ø–æ–ª—å–∑—É—é –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ç–µ—Ä–∞–ø–∏–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å –±–µ–∑ –º–∏–ª–ª–∏–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.\n\n"
                         f"‚ú® –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—é —É—á–∞—Å—Ç–∏–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–∞–≤–º–∞–º–∏.\n"
                          "–°—É–ø–µ—Ä–≤–∏–∑–∏—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–º–∞–º–∏ –∞–±—å—é–∑–∞, —Å–µ–º–µ–π–Ω–æ–π —Ç–µ—Ä–∞–ø–∏–∏, —Å—Ç—Ä–µ—Å—Å–∞ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.\n\n"
                         f"‚ú® –í —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ –º–Ω–µ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
                         f"‚ú® –ü–æ–Ω–∏–º–∞—é, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ, –∂–∏–≤—è –≤ –±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–µ, –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–µ–±—è, –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏, —Å–ø–æ–∫–æ–π–Ω—ã–º–∏ –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º–∏.\n\n"
                         f"–ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ª—é–¥–µ–π —è —Å–æ–∑–¥–∞–ª–∞ –¥–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É üôè\n\n")
    
#[–ú–ü]–û –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ
@dp.message_handler(filters.Text(equals="üôå –û –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ üôå"))
async def cmd_handler(message: types.Message):
    await message.answer(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ:\n"
                         f"‚Äî —Ö–æ—á–µ—Ç –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–µ\n"
                         f"‚Äî —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–µ–µ –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–µ–µ\n"
                         f"‚Äî —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è\n"
                         f"‚Äî —Ö–æ—á–µ—Ç –±—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö —É–±–µ–∂–¥–µ–Ω–∏–π –∏ —É—Å—Ç–∞–Ω–æ–≤–æ–∫\n\n"
                         f"–Ø –æ–±—ä–µ–¥–∏–Ω–∏–ª–∞ –≤—Å–µ –º–∏—Ä–æ–≤—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ, –¥—É—Ö–æ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –∑–Ω–∞–Ω–∏—è, —Å–ø–æ—Å–æ–±–Ω—ã–µ –±—ã—Å—Ç—Ä–æ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø—Ä–∏–π—Ç–∏ –≤ –≥–∞—Ä–º–æ–Ω–∏—é —Å —Å–æ–±–æ–π üôå\n\n"
                         f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç 1 –ø—Ä—è–º–æ–π —ç—Ñ–∏—Ä –≤ –º–µ—Å—è—Ü.")


#[–ú–ü]–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥/–û–ø—Ä–æ—Å–Ω–∏–∫ [–ü–ü–û]
#@dp.message_handler(filters.Text(equals="–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"))
#async def cmd_start(message: types.Message):
#    user_id = message.from_user.id
#    if db.get_onetimepromo(user_id) == 1:
#        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
#    else:
#        await message.reply("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 2 –¥–Ω—è - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å-–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ. –í—ã –≥–æ—Ç–æ–≤—ã?", reply_markup = nav.opros)

#[–ü–ü–û]–ù–µ –≥–æ—Ç–æ–≤
#@dp.message_handler(filters.Text(equals="–ù–µ—Ç, –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤(–∞)"))
#async def cmd_handler(message: types.Message):
#    await message.reply("–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=nav.mainMenu)

#[–ü–ü–û]–ì–æ—Ç–æ–≤
#@dp.message_handler(filters.Text(equals="–î–∞, –≥–æ—Ç–æ–≤(–∞)"))
#async def cmd_start(message: types.Message):
#    user_id = message.from_user.id
#    await Form.name.set()
#    markupsrem = types.ReplyKeyboardRemove()
#    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=markupsrem)

#[–ü–ü–û]–°–∫–æ–ª—å–∫–æ –ª–µ—Ç?
#@dp.message_handler(state=Form.name)
#async def process_name(message: types.Message, state: FSMContext):
#    if not db.user_exists(message.from_user.id):
#     db.set_firstname(message.from_user.id, message.text)
#    async with state.proxy() as data:
#        data['firstname'] = message.text
#
#    await Form.next()
#    await message.reply("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
#    markup = types.ReplyKeyboardRemove()

#[–ü–ü–û]–í–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏
#@dp.message_handler(lambda message: not message.text.isdigit(), state=Form.age)
#async def process_age_invalid(message: types.Message):
#    return await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏")

#[–ü–ü–û]–í—ã–±–æ—Ä –ø–æ–ª–∞
#@dp.message_handler(lambda message: message.text.isdigit(), state=Form.age)
#async def process_age(message: types.Message, state: FSMContext):
#    await Form.next()
#    await state.update_data(age=int(message.text))
#    if not db.user_exists(message.from_user.id):
#     db.set_ages(message.from_user.id, message.text)
#
#    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
#    markup.add("–ú", "–ñ")
#
#    await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª (–∫–Ω–æ–ø–∫–æ–π)", reply_markup=markup)

#[–ü–ü–û]–û—Ç–∫–∞–∑ –ø–æ–ª
#@dp.message_handler(lambda message: message.text not in ["–ú", "–ñ"], state=Form.gender)
#async def process_gender_invalid(message: types.Message):
#    return await message.reply("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –ø–æ–ª. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")

#[–ü–ü–û]–†–∞—Å—Å–∫–∞–∑
#@dp.message_handler(state=Form.gender)
#async def process_gender(message: types.Message, state: FSMContext):
#    async with state.proxy() as data:
#        if(not db.user_exists(message.from_user.id)):
#         db.set_gender(message.from_user.id, message.text)
#        data['gender'] = message.text
#        markup = types.ReplyKeyboardRemove()
#
#    await Form.next()
#    markupsrem = types.ReplyKeyboardRemove()
#    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ: –ß—Ç–æ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –∞ —á—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏?", reply_markup=markupsrem)

#–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
async def create_invite_link(channel_id):
    member_count = await bot.get_chat_members_count(chat_id=channel_id)
    response = await bot.create_chat_invite_link(chat_id=channel_id, member_limit=member_count - 1)
    invite_link = response.invite_link
    return invite_link

#[–ü–ü–û]–£—Å–ø–µ—à–Ω–æ + –ø—Ä–æ–º–æ
#@dp.message_handler(state=Form.why)
#async def process_why(message: types.Message, state: FSMContext):
#    if(not db.user_exists(message.from_user.id)):
#     db.set_why(message.from_user.id, message.text)
#    async with state.proxy() as data:
#        data['why'] = message.text
#    invite_link = await create_invite_link(-1001870585668)
#    invite_links[invite_link] = 1
#    await message.reply("–û–ø—Ä–æ—Å –ø—Ä–æ–π–¥–µ–Ω. –ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –¥–Ω—è", reply_markup=nav.mainMenu)
#    await message.answer(text=f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n{invite_link}")
#    await asyncio.sleep(3)
#    await message.answer(text=f"–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ! \n\n–û–±–µ—â–∞—é, –ü–†–ò –£–°–õ–û–í–ò–ò üòâ —á—Ç–æ –í—ã –∑–∞–¥–µ—Ä–∂–∏—Ç–µ—Å—å —Ö–æ—Ç—è –±—ã –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ —Å–æ –º–Ω–æ–π, —Ç–æ: \n–°—Ç–∞–Ω–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–µ–µ, –≥–∞—Ä–º–æ–Ω–∏—á–Ω–µ–µ, –±–æ–ª–µ–µ –∑–∞—â–∏—â–µ–Ω–Ω–µ–µ –æ—Ç –ª—é–±—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π. \n\n–ê –µ—Å–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É, —Ç–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –µ–µ —Ä–µ—à–∏—Ç—å –≤–º–µ—Å—Ç–µ!!! \n\n–Ø –±—É–¥—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –í–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º –ø—É—Ç–∏. \n–í—Å–µ –±—É–¥–µ—Ç –≤ –ª–µ–≥–∫–æ–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
#    user_id = message.from_user.id
#    expiry_date = datetime.datetime.now() + datetime.timedelta(days=2)
#    db.set_onetimepromo(user_id, 1)
#    db.set_promo(user_id)
#    db.set_is_paid(user_id, 1)
#    reminder_date = expiry_date - datetime.timedelta(days=1)
#    if datetime.datetime.now() >= reminder_date:
#            await bot.send_message(user_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!", reply_markup=nav.MySub2)
#
#    await state.finish()

#–ú–û–Ø –ü–û–î–ü–ò–°–ö–ê [–ú–ü]
@dp.message_handler(filters.Text(equals="–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"))
async def my_sub_handler(message: types.Message):
    user_id = message.from_user.id
    is_paid = db.get_is_paid(user_id)
    
    if is_paid == 1:
        user = message.from_user
        name = user.first_name
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞', {name}!\n\n" "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=nav.MySub2)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–¥–µ–ª—É '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'.")

@dp.message_handler(filters.Text(equals="–ù–∞ –≥–ª–∞–≤–Ω—É—é"))
async def cmd_handler(message: types.Message):
        if message.chat.type == 'private':
            await message.answer("–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é", reply_markup=nav.mainMenu)
#[–ú–ü] –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(filters.Text(equals="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"))
async def my_sub_date_handler(message: types.Message):
    user_id = message.from_user.id
    expiry_date = db.get_expiry_date(user_id)
    if expiry_date is not None:
        expiry_date_formatted = str(expiry_date)[:-10]
        message = f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: \n<b>{expiry_date_formatted}</b>"
        await bot.send_message(user_id, message, parse_mode="HTML")

#[–ú–ü] –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
@dp.message_handler(filters.Text(equals="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
async def cmd_handler(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup = nav.sub_inline_markup)

#[–ì–ú]–°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–Ω–Ω–æ–π
@dp.message_handler(filters.Text(equals="–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ"))
async def cmd_handler(message: types.Message):
    await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –≤–æ—Ç –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º:", reply_markup = nav.Anna_inline_markup)

#–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ [–ê–ü]
allowed_user_ids = [1009701651, 951854396, 711940612]

@dp.message_handler(filters.Text(equals="admin_panel"))
async def cmd_handler(message: types.Message):
        if message.chat.type == 'private':
           if message.from_user.id in allowed_user_ids:
            await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–Ω–Ω–∞\n–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?", reply_markup=nav.admin)

#[–ê–ü]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(filters.Text(equals="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
async def cmd_handler(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id in allowed_user_ids:
            total_users = db.get_total_users()
            paid_users = db.get_is_paid(is_paid=1)
            non_paid_users = db.get_is_paid(is_paid=0)
            await message.answer(f"–û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                                 f"–ß–∏—Å–ª–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(paid_users)}\n"
                                 f"–ß–∏—Å–ª–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(non_paid_users)}")

#[–ê–ü]–†–∞—Å—Å—ã–ª–∫–∞ –º–µ–Ω—é
@dp.message_handler(filters.Text(equals="–†–∞—Å—Å—ã–ª–∫–∞"))
async def cmd_handler(message: types.Message):
        if message.chat.type == 'private':
           if message.from_user.id in allowed_user_ids:
            await message.answer("–í—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–†–∞—Å—Å—ã–ª–∫–∞'\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=nav.Mailings)

@dp.message_handler(filters.Text(equals="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º"))
async def cmd_handler(message: types.Message):
        if message.chat.type == 'private':
           if message.from_user.id in allowed_user_ids:
            await message.answer("–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å–µ—Ö - –Ω–∞–ø–∏—à–∏—Ç–µ:\n/sendall –≤–∞—à —Ç–µ–∫—Å—Ç")

@dp.message_handler(filters.Text(equals="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º"))
async def cmd_handler(message: types.Message):
        if message.chat.type == 'private':
           if message.from_user.id in allowed_user_ids:
            await message.answer("–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö - –Ω–∞–ø–∏—à–∏—Ç–µ:\n/sendpaid –≤–∞—à —Ç–µ–∫—Å—Ç")

@dp.message_handler(filters.Text(equals="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º"))
async def cmd_handler(message: types.Message):
        if message.chat.type == 'private':
           if message.from_user.id in allowed_user_ids:
            await message.answer("–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö - –Ω–∞–ø–∏—à–∏—Ç–µ:\n/sendnonpaid –≤–∞—à —Ç–µ–∫—Å—Ç")

@dp.message_handler(filters.Text(equals="–ù–∞–∑–∞–¥"))
async def cmd_handler(message: types.Message):
        if message.chat.type == 'private':
           if message.from_user.id in allowed_user_ids:
            await message.answer("–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –Ω–∞–∑–∞–¥", reply_markup=nav.admin)

#[–†–∞—Å—Å—ã–ª–∫–∞] –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message_handler(commands=['sendall'])
async def cmd_handler(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id in allowed_user_ids:
            text = message.text[9:]
            users = db.get_allusers()
            for row in users:
                try:
                    await bot.send_message(row, text)
                    if int(row[1]) == 1:
                         db.set_active(row, 1)
                except:
                    db.set_active(row, 0)
    await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")

#[–†–∞—Å—Å—ã–ª–∫–∞] –ø–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message_handler(commands=['sendpaid'])
async def cmd_handler(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id in allowed_user_ids:
            text = message.text[10:]
            users = db.get_allusers()
            for row in users:
                try:
                    if db.get_is_paid(row):
                        await bot.send_message(row, text)
                        db.set_active(row, 1)
                except:
                    db.set_active(row, 0)
    await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")

#[–†–∞—Å—Å—ã–ª–∫–∞] –ø–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message_handler(commands=['sendnonpaid'])
async def cmd_handler(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id in allowed_user_ids:
            text = message.text[13:]
            users = db.get_allusers()
            for row in users:
                try:
                    if not db.get_is_paid(row):
                        await bot.send_message(row, text)
                        db.set_active(row, 1)
                except:
                    db.set_active(row, 0)
    await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")

#[–ì–ú]–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler()
async def bot_message(message:types.Message):
    if message.chat.type == "private":
        if message.text == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É":
            await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup = nav.sub_inline_markup)

#[–ü–æ–∫—É–ø–∫–∞] –Ω–∞ 1 –º–µ—Å
@dp.callback_query_handler(text="submonth")
async def submonth(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü",
        description="–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º", 
        payload="month_sub", 
        provider_token=YOOTOKEN, 
        currency="RUB", 
        start_parameter="test_bot", 
        prices=[{"label": "–†—É–±", "amount": 299000}])

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: types.Message):
    user_id = message.from_user.id
    expiry_date = datetime.datetime.now() + datetime.timedelta(days=30)
    if message.successful_payment.invoice_payload == "month_sub":
        invite_link = await create_invite_link(-1001870585668)
        invite_links[invite_link] = 1
        await message.reply("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü"
                            f"–ó–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞–º –ø—Ä–∏–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç")
        await asyncio.sleep(3)
        await message.answer(text=f"–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ! \n\n–û–±–µ—â–∞—é, –ü–†–ò –£–°–õ–û–í–ò–ò üòâ —á—Ç–æ –í—ã –∑–∞–¥–µ—Ä–∂–∏—Ç–µ—Å—å —Ö–æ—Ç—è –±—ã –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ —Å–æ –º–Ω–æ–π, —Ç–æ: \n–°—Ç–∞–Ω–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–µ–µ, –≥–∞—Ä–º–æ–Ω–∏—á–Ω–µ–µ, –±–æ–ª–µ–µ –∑–∞—â–∏—â–µ–Ω–Ω–µ–µ –æ—Ç –ª—é–±—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π. \n\n–ê –µ—Å–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É, —Ç–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –µ–µ —Ä–µ—à–∏—Ç—å –≤–º–µ—Å—Ç–µ!!! \n\n–Ø –±—É–¥—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –í–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º –ø—É—Ç–∏. \n–í—Å–µ –±—É–¥–µ—Ç –≤ –ª–µ–≥–∫–æ–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        await message.answer(text=f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n{invite_link}")
        if not db.user_exists_month(user_id):
            db.add_user_month(user_id)
            db.set_is_paid(message.from_user.id, 1)
            db.set_paid_month(user_id)
    if datetime.datetime.now() >= expiry_date:
        chat_id = 1001870585668
        await bot.kick_chat_member(chat_id, user_id)
    else:
        reminder_date = expiry_date - datetime.timedelta(days=3)
    if datetime.datetime.now() >= reminder_date:
        await bot.send_message(user_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è!", reply_markup=nav.MySub2)

    elif message.successful_payment.invoice_payload == "6month_sub":
        invite_link = await create_invite_link(-1001870585668)
        invite_links[invite_link] = 1
        await message.reply("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤"
                            f"–ó–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞–º –ø—Ä–∏–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç")
        await asyncio.sleep(3)
        await message.answer(text=f"–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ! \n\n–û–±–µ—â–∞—é, –ü–†–ò –£–°–õ–û–í–ò–ò üòâ —á—Ç–æ –í—ã –∑–∞–¥–µ—Ä–∂–∏—Ç–µ—Å—å —Ö–æ—Ç—è –±—ã –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ —Å–æ –º–Ω–æ–π, —Ç–æ: \n–°—Ç–∞–Ω–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–µ–µ, –≥–∞—Ä–º–æ–Ω–∏—á–Ω–µ–µ, –±–æ–ª–µ–µ –∑–∞—â–∏—â–µ–Ω–Ω–µ–µ –æ—Ç –ª—é–±—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π. \n\n–ê –µ—Å–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É, —Ç–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –µ–µ —Ä–µ—à–∏—Ç—å –≤–º–µ—Å—Ç–µ!!! \n\n–Ø –±—É–¥—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –í–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º –ø—É—Ç–∏. \n–í—Å–µ –±—É–¥–µ—Ç –≤ –ª–µ–≥–∫–æ–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        await message.answer(text=f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n{invite_link}")
        if not db.user_exists_sixmonth(user_id):
            db.add_user_sixmonth(user_id)
            db.set_is_paid(message.from_user.id, 1)
            db.set_paid_sixmonth(user_id)
    reminder_date = expiry_date - datetime.timedelta(days=3)
    if datetime.datetime.now() >= reminder_date:
        await bot.send_message(user_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è!", reply_markup=nav.MySub2)

#[–ü–æ–∫—É–ø–∫–∞] –Ω–∞ 6 –º–µ—Å
@dp.callback_query_handler(text="sub6month")
async def submonth(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤",
        description="–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º", 
        payload="6month_sub", 
        provider_token=YOOTOKEN, 
        currency="RUB", 
        start_parameter="test_bot", 
        prices=[{"label": "–†—É–±", "amount": 1500000}])

@dp.pre_checkout_query_handler(state="*")
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

#–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏    
async def check_subscription_expiry():
    current_date = datetime.datetime.now()
    users = db.get_allusers()
    for user_id in users:
        expiry_date = db.get_expiry_date(user_id)
        if expiry_date is not None and expiry_date < current_date:
                chat_id = 1001870585668
                await bot.kick_chat_member(chat_id, user_id)

async def run_check():
    while True:
        await check_subscription_expiry()
        await asyncio.sleep(48860)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(run_check())
    executor.start_polling(dp, skip_updates=True)